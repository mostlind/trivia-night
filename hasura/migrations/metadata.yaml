version: 2
tables:
- table:
    schema: public
    name: answer
  object_relationships:
  - name: question_state
    using:
      foreign_key_constraint_on: question_state_id
  - name: team
    using:
      foreign_key_constraint_on: team_id
  insert_permissions:
  - role: participant
    permission:
      check:
        question_state:
          game_state:
            teams:
              id:
                _eq: X-Hasura-User-Id
      set:
        team_id: x-hasura-User-Id
      columns:
      - question_state_id
      - value
      backend_only: false
  select_permissions:
  - role: host
    permission:
      columns:
      - correct
      - id
      - question_state_id
      - team_id
      - value
      filter:
        question_state:
          game_state:
            game:
              host_id:
                _eq: X-Hasura-User-Id
  - role: participant
    permission:
      columns:
      - id
      - value
      filter:
        team_id:
          _eq: X-Hasura-User-Id
  update_permissions:
  - role: host
    permission:
      columns:
      - correct
      filter:
        question_state:
          game_state:
            game:
              host_id:
                _eq: X-Hasura-User-Id
      check: null
- table:
    schema: public
    name: game
  object_relationships:
  - name: host
    using:
      foreign_key_constraint_on: host_id
  array_relationships:
  - name: game_states
    using:
      foreign_key_constraint_on:
        column: game_id
        table:
          schema: public
          name: game_state
  - name: questions
    using:
      foreign_key_constraint_on:
        column: game_id
        table:
          schema: public
          name: question
  insert_permissions:
  - role: host
    permission:
      check:
        host_id:
          _eq: X-Hasura-User-Id
      set:
        host_id: x-hasura-User-Id
      columns:
      - name
      backend_only: false
  select_permissions:
  - role: anonymous
    permission:
      columns:
      - name
      filter: {}
  - role: api-user
    permission:
      columns:
      - id
      filter: {}
  - role: host
    permission:
      columns:
      - created_at
      - id
      - name
      - updated_at
      filter:
        host_id:
          _eq: X-Hasura-User-Id
  - role: participant
    permission:
      columns:
      - name
      filter:
        game_states:
          teams:
            id:
              _eq: X-Hasura-User-Id
  update_permissions:
  - role: host
    permission:
      columns:
      - name
      filter:
        host_id:
          _eq: X-Hasura-User-Id
      check: null
  delete_permissions:
  - role: host
    permission:
      filter:
        host_id:
          _eq: X-Hasura-User-Id
- table:
    schema: public
    name: game_state
  object_relationships:
  - name: current_question
    using:
      foreign_key_constraint_on: current_question_id
  - name: game
    using:
      foreign_key_constraint_on: game_id
  - name: game_state_enum
    using:
      foreign_key_constraint_on: state
  array_relationships:
  - name: question_states
    using:
      foreign_key_constraint_on:
        column: game_state_id
        table:
          schema: public
          name: question_state
  - name: teams
    using:
      foreign_key_constraint_on:
        column: game_state_id
        table:
          schema: public
          name: team
  insert_permissions:
  - role: api-user
    permission:
      check: {}
      columns:
      - current_question_id
      - game_id
      - id
      backend_only: false
  - role: host
    permission:
      check:
        game:
          host_id:
            _eq: X-Hasura-User-Id
      columns:
      - current_question_id
      - game_id
      - id
      backend_only: false
  select_permissions:
  - role: anonymous
    permission:
      columns:
      - game_id
      - id
      filter: {}
  - role: api-user
    permission:
      columns:
      - id
      filter: {}
  - role: host
    permission:
      columns:
      - current_question_id
      - game_id
      - id
      - state
      filter:
        game:
          host_id:
            _eq: X-Hasura-User-Id
  - role: participant
    permission:
      columns:
      - current_question_id
      - game_id
      - id
      - state
      filter:
        teams:
          id:
            _eq: X-Hasura-User-Id
  update_permissions:
  - role: api-user
    permission:
      columns:
      - current_question_id
      filter: {}
      check: null
  - role: host
    permission:
      columns:
      - current_question_id
      - state
      filter:
        game:
          host_id:
            _eq: X-Hasura-User-Id
      check: null
- table:
    schema: public
    name: game_state_enum
  is_enum: true
  array_relationships:
  - name: game_states
    using:
      foreign_key_constraint_on:
        column: state
        table:
          schema: public
          name: game_state
  select_permissions:
  - role: host
    permission:
      columns:
      - value
      filter: {}
- table:
    schema: public
    name: host
  array_relationships:
  - name: games
    using:
      foreign_key_constraint_on:
        column: host_id
        table:
          schema: public
          name: game
  insert_permissions:
  - role: api-user
    permission:
      check: {}
      columns:
      - email_hash
      backend_only: false
  select_permissions:
  - role: api-user
    permission:
      columns:
      - id
      filter: {}
  update_permissions:
  - role: api-user
    permission:
      columns:
      - email_hash
      filter: {}
      check: {}
- table:
    schema: public
    name: one_time_password
  object_relationships:
  - name: host
    using:
      foreign_key_constraint_on: email_hash
  insert_permissions:
  - role: api-user
    permission:
      check: {}
      columns:
      - email_hash
      - one_time_password_hash
      backend_only: false
  select_permissions:
  - role: api-user
    permission:
      columns:
      - email_hash
      filter: {}
  delete_permissions:
  - role: api-user
    permission:
      filter: {}
- table:
    schema: public
    name: question
  object_relationships:
  - name: game
    using:
      foreign_key_constraint_on: game_id
  array_relationships:
  - name: question_states
    using:
      foreign_key_constraint_on:
        column: question_id
        table:
          schema: public
          name: question_state
  insert_permissions:
  - role: host
    permission:
      check:
        game:
          host_id:
            _eq: X-Hasura-User-Id
      columns:
      - game_id
      - point_value
      - question_text
      backend_only: false
  select_permissions:
  - role: api-user
    permission:
      columns:
      - id
      - question_order
      filter: {}
  - role: host
    permission:
      columns:
      - created_at
      - game_id
      - id
      - point_value
      - question_order
      - question_text
      - updated_at
      filter:
        game:
          host_id:
            _eq: X-Hasura-User-Id
  - role: participant
    permission:
      columns:
      - point_value
      - question_text
      filter:
        question_states:
          game_state:
            teams:
              id:
                _eq: X-Hasura-User-Id
  update_permissions:
  - role: host
    permission:
      columns:
      - point_value
      - question_order
      - question_text
      filter:
        game:
          host_id:
            _eq: X-Hasura-User-Id
      check: null
  delete_permissions:
  - role: host
    permission:
      filter:
        game:
          host_id:
            _eq: X-Hasura-User-Id
- table:
    schema: public
    name: question_state
  object_relationships:
  - name: game_state
    using:
      foreign_key_constraint_on: game_state_id
  - name: next_question_state
    using:
      foreign_key_constraint_on: next_question_state_id
  - name: question
    using:
      foreign_key_constraint_on: question_id
  - name: question_state_enum
    using:
      foreign_key_constraint_on: state
  array_relationships:
  - name: answers
    using:
      foreign_key_constraint_on:
        column: question_state_id
        table:
          schema: public
          name: answer
  - name: game_states
    using:
      foreign_key_constraint_on:
        column: current_question_id
        table:
          schema: public
          name: game_state
  insert_permissions:
  - role: api-user
    permission:
      check: {}
      columns:
      - id
      - next_question_state_id
      - question_id
      backend_only: false
  - role: host
    permission:
      check:
        game_state:
          game:
            host_id:
              _eq: X-Hasura-User-Id
      columns:
      - game_state_id
      - id
      - next_question_state_id
      - question_id
      backend_only: false
  select_permissions:
  - role: host
    permission:
      columns:
      - game_state_id
      - id
      - next_question_state_id
      - question_id
      - state
      filter:
        game_state:
          game:
            host_id:
              _eq: X-Hasura-User-Id
  - role: participant
    permission:
      columns:
      - id
      - question_id
      - state
      filter:
        game_state:
          teams:
            id:
              _eq: X-Hasura-User-Id
  update_permissions:
  - role: host
    permission:
      columns:
      - state
      filter:
        game_state:
          game:
            host_id:
              _eq: X-Hasura-User-Id
      check: null
- table:
    schema: public
    name: question_state_enum
  is_enum: true
  array_relationships:
  - name: question_states
    using:
      foreign_key_constraint_on:
        column: state
        table:
          schema: public
          name: question_state
  select_permissions:
  - role: host
    permission:
      columns:
      - value
      filter: {}
- table:
    schema: public
    name: team
  object_relationships:
  - name: game_state
    using:
      foreign_key_constraint_on: game_state_id
  array_relationships:
  - name: answers
    using:
      foreign_key_constraint_on:
        column: team_id
        table:
          schema: public
          name: answer
  insert_permissions:
  - role: api-user
    permission:
      check: {}
      columns:
      - game_state_id
      - name
      backend_only: false
  select_permissions:
  - role: api-user
    permission:
      columns:
      - id
      filter: {}
  - role: host
    permission:
      columns:
      - game_state_id
      - id
      - name
      filter:
        game_state:
          game:
            host_id:
              _eq: X-Hasura-User-Id
actions:
- name: access_token_from_otp
  definition:
    handler: http://trivia-night-frontend:3000/api/otp-login
    output_type: Token
    arguments:
    - name: credentials
      type: OTPCredentials!
    type: mutation
    kind: synchronous
  permissions:
  - role: anonymous
- name: create_team
  definition:
    handler: http://trivia-night-frontend:3000/api/create-team
    output_type: TeamToken
    arguments:
    - name: teamName
      type: String!
    - name: gameStateId
      type: uuid!
    type: mutation
    kind: synchronous
  permissions:
  - role: anonymous
- name: send_auth_link
  definition:
    handler: http://trivia-night-frontend:3000/api/send-auth-link
    output_type: EmailSendStatus
    arguments:
    - name: email
      type: String!
    type: mutation
    kind: synchronous
  permissions:
  - role: anonymous
- name: start_game
  definition:
    handler: http://trivia-night-frontend:3000/api/start-game
    output_type: CreateGameStateOutput
    arguments:
    - name: game_id
      type: uuid!
    type: mutation
    kind: synchronous
  permissions:
  - role: host
custom_types:
  input_objects:
  - name: CreateGameStateInput
    fields:
    - name: game_id
      type: uuid!
  - name: StartGameInput
    fields:
    - name: game_id
      type: uuid!
  - name: OTPCredentials
    fields:
    - name: emailHash
      type: String!
    - name: oneTimePassword
      type: String!
  objects:
  - name: CreateGameStateOutput
    fields:
    - name: game_state_id
      type: uuid!
    relationships:
    - remote_table:
        schema: public
        name: game_state
      name: game_state
      type: object
      field_mapping:
        game_state_id: id
  - name: StartGameOutput
    fields:
    - name: id
      type: uuid!
  - name: EmailSendStatus
    fields:
    - name: status
      type: String!
  - name: Token
    fields:
    - name: token
      type: String!
  - name: TeamToken
    fields:
    - name: token
      type: String!
